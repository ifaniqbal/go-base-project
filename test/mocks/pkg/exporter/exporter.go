// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	exporter "github.com/ifaniqbal/go-base-project/pkg/exporter"
	mock "github.com/stretchr/testify/mock"
)

// Exporter is an autogenerated mock type for the Exporter type
type Exporter struct {
	mock.Mock
}

type Exporter_Expecter struct {
	mock *mock.Mock
}

func (_m *Exporter) EXPECT() *Exporter_Expecter {
	return &Exporter_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: path, table
func (_m *Exporter) Export(path string, table exporter.Table) error {
	ret := _m.Called(path, table)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, exporter.Table) error); ok {
		r0 = rf(path, table)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exporter_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type Exporter_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - path string
//   - table exporter.Table
func (_e *Exporter_Expecter) Export(path interface{}, table interface{}) *Exporter_Export_Call {
	return &Exporter_Export_Call{Call: _e.mock.On("Export", path, table)}
}

func (_c *Exporter_Export_Call) Run(run func(path string, table exporter.Table)) *Exporter_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(exporter.Table))
	})
	return _c
}

func (_c *Exporter_Export_Call) Return(_a0 error) *Exporter_Export_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Exporter_Export_Call) RunAndReturn(run func(string, exporter.Table) error) *Exporter_Export_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewExporter creates a new instance of Exporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExporter(t mockConstructorTestingTNewExporter) *Exporter {
	mock := &Exporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

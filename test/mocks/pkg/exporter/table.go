// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Table is an autogenerated mock type for the Table type
type Table struct {
	mock.Mock
}

type Table_Expecter struct {
	mock *mock.Mock
}

func (_m *Table) EXPECT() *Table_Expecter {
	return &Table_Expecter{mock: &_m.Mock}
}

// GetBody provides a mock function with given fields:
func (_m *Table) GetBody() [][]string {
	ret := _m.Called()

	var r0 [][]string
	if rf, ok := ret.Get(0).(func() [][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	return r0
}

// Table_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type Table_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *Table_Expecter) GetBody() *Table_GetBody_Call {
	return &Table_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *Table_GetBody_Call) Run(run func()) *Table_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Table_GetBody_Call) Return(_a0 [][]string) *Table_GetBody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Table_GetBody_Call) RunAndReturn(run func() [][]string) *Table_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields:
func (_m *Table) GetHeader() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Table_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type Table_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
func (_e *Table_Expecter) GetHeader() *Table_GetHeader_Call {
	return &Table_GetHeader_Call{Call: _e.mock.On("GetHeader")}
}

func (_c *Table_GetHeader_Call) Run(run func()) *Table_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Table_GetHeader_Call) Return(_a0 []string) *Table_GetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Table_GetHeader_Call) RunAndReturn(run func() []string) *Table_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTable creates a new instance of Table. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTable(t mockConstructorTestingTNewTable) *Table {
	mock := &Table{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

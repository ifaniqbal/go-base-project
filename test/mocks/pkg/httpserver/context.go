// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields:
func (_m *Context) Abort() {
	_m.Called()
}

// Context_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type Context_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *Context_Expecter) Abort() *Context_Abort_Call {
	return &Context_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *Context_Abort_Call) Run(run func()) *Context_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Abort_Call) Return() *Context_Abort_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Abort_Call) RunAndReturn(run func()) *Context_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// AbortWithStatus provides a mock function with given fields: code
func (_m *Context) AbortWithStatus(code int) {
	_m.Called(code)
}

// Context_AbortWithStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortWithStatus'
type Context_AbortWithStatus_Call struct {
	*mock.Call
}

// AbortWithStatus is a helper method to define mock.On call
//   - code int
func (_e *Context_Expecter) AbortWithStatus(code interface{}) *Context_AbortWithStatus_Call {
	return &Context_AbortWithStatus_Call{Call: _e.mock.On("AbortWithStatus", code)}
}

func (_c *Context_AbortWithStatus_Call) Run(run func(code int)) *Context_AbortWithStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Context_AbortWithStatus_Call) Return() *Context_AbortWithStatus_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_AbortWithStatus_Call) RunAndReturn(run func(int)) *Context_AbortWithStatus_Call {
	_c.Call.Return(run)
	return _c
}

// AbortWithStatusJSON provides a mock function with given fields: code, jsonObj
func (_m *Context) AbortWithStatusJSON(code int, jsonObj interface{}) {
	_m.Called(code, jsonObj)
}

// Context_AbortWithStatusJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortWithStatusJSON'
type Context_AbortWithStatusJSON_Call struct {
	*mock.Call
}

// AbortWithStatusJSON is a helper method to define mock.On call
//   - code int
//   - jsonObj interface{}
func (_e *Context_Expecter) AbortWithStatusJSON(code interface{}, jsonObj interface{}) *Context_AbortWithStatusJSON_Call {
	return &Context_AbortWithStatusJSON_Call{Call: _e.mock.On("AbortWithStatusJSON", code, jsonObj)}
}

func (_c *Context_AbortWithStatusJSON_Call) Run(run func(code int, jsonObj interface{})) *Context_AbortWithStatusJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_AbortWithStatusJSON_Call) Return() *Context_AbortWithStatusJSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_AbortWithStatusJSON_Call) RunAndReturn(run func(int, interface{})) *Context_AbortWithStatusJSON_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: obj
func (_m *Context) Bind(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type Context_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - obj interface{}
func (_e *Context_Expecter) Bind(obj interface{}) *Context_Bind_Call {
	return &Context_Bind_Call{Call: _e.mock.On("Bind", obj)}
}

func (_c *Context_Bind_Call) Run(run func(obj interface{})) *Context_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Context_Bind_Call) Return(_a0 error) *Context_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Bind_Call) RunAndReturn(run func(interface{}) error) *Context_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// BindJSON provides a mock function with given fields: obj
func (_m *Context) BindJSON(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_BindJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindJSON'
type Context_BindJSON_Call struct {
	*mock.Call
}

// BindJSON is a helper method to define mock.On call
//   - obj interface{}
func (_e *Context_Expecter) BindJSON(obj interface{}) *Context_BindJSON_Call {
	return &Context_BindJSON_Call{Call: _e.mock.On("BindJSON", obj)}
}

func (_c *Context_BindJSON_Call) Run(run func(obj interface{})) *Context_BindJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Context_BindJSON_Call) Return(_a0 error) *Context_BindJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_BindJSON_Call) RunAndReturn(run func(interface{}) error) *Context_BindJSON_Call {
	_c.Call.Return(run)
	return _c
}

// BindQuery provides a mock function with given fields: obj
func (_m *Context) BindQuery(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context_BindQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindQuery'
type Context_BindQuery_Call struct {
	*mock.Call
}

// BindQuery is a helper method to define mock.On call
//   - obj interface{}
func (_e *Context_Expecter) BindQuery(obj interface{}) *Context_BindQuery_Call {
	return &Context_BindQuery_Call{Call: _e.mock.On("BindQuery", obj)}
}

func (_c *Context_BindQuery_Call) Run(run func(obj interface{})) *Context_BindQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Context_BindQuery_Call) Return(_a0 error) *Context_BindQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_BindQuery_Call) RunAndReturn(run func(interface{}) error) *Context_BindQuery_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultQuery provides a mock function with given fields: key, defaultValue
func (_m *Context) DefaultQuery(key string, defaultValue string) string {
	ret := _m.Called(key, defaultValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context_DefaultQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultQuery'
type Context_DefaultQuery_Call struct {
	*mock.Call
}

// DefaultQuery is a helper method to define mock.On call
//   - key string
//   - defaultValue string
func (_e *Context_Expecter) DefaultQuery(key interface{}, defaultValue interface{}) *Context_DefaultQuery_Call {
	return &Context_DefaultQuery_Call{Call: _e.mock.On("DefaultQuery", key, defaultValue)}
}

func (_c *Context_DefaultQuery_Call) Run(run func(key string, defaultValue string)) *Context_DefaultQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Context_DefaultQuery_Call) Return(_a0 string) *Context_DefaultQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_DefaultQuery_Call) RunAndReturn(run func(string, string) string) *Context_DefaultQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *Context) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Context_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Context_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) Get(key interface{}) *Context_Get_Call {
	return &Context_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Context_Get_Call) Run(run func(key string)) *Context_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Context_Get_Call) Return(value interface{}, exists bool) *Context_Get_Call {
	_c.Call.Return(value, exists)
	return _c
}

func (_c *Context_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *Context_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields: key
func (_m *Context) GetHeader(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type Context_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) GetHeader(key interface{}) *Context_GetHeader_Call {
	return &Context_GetHeader_Call{Call: _e.mock.On("GetHeader", key)}
}

func (_c *Context_GetHeader_Call) Run(run func(key string)) *Context_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Context_GetHeader_Call) Return(_a0 string) *Context_GetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_GetHeader_Call) RunAndReturn(run func(string) string) *Context_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuery provides a mock function with given fields: key
func (_m *Context) GetQuery(key string) (string, bool) {
	ret := _m.Called(key)

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Context_GetQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuery'
type Context_GetQuery_Call struct {
	*mock.Call
}

// GetQuery is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) GetQuery(key interface{}) *Context_GetQuery_Call {
	return &Context_GetQuery_Call{Call: _e.mock.On("GetQuery", key)}
}

func (_c *Context_GetQuery_Call) Run(run func(key string)) *Context_GetQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Context_GetQuery_Call) Return(_a0 string, _a1 bool) *Context_GetQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Context_GetQuery_Call) RunAndReturn(run func(string) (string, bool)) *Context_GetQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: key, value
func (_m *Context) Header(key string, value string) {
	_m.Called(key, value)
}

// Context_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type Context_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *Context_Expecter) Header(key interface{}, value interface{}) *Context_Header_Call {
	return &Context_Header_Call{Call: _e.mock.On("Header", key, value)}
}

func (_c *Context_Header_Call) Run(run func(key string, value string)) *Context_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Context_Header_Call) Return() *Context_Header_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Header_Call) RunAndReturn(run func(string, string)) *Context_Header_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function with given fields: code, obj
func (_m *Context) JSON(code int, obj interface{}) {
	_m.Called(code, obj)
}

// Context_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type Context_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - obj interface{}
func (_e *Context_Expecter) JSON(code interface{}, obj interface{}) *Context_JSON_Call {
	return &Context_JSON_Call{Call: _e.mock.On("JSON", code, obj)}
}

func (_c *Context_JSON_Call) Run(run func(code int, obj interface{})) *Context_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_JSON_Call) Return() *Context_JSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_JSON_Call) RunAndReturn(run func(int, interface{})) *Context_JSON_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with given fields:
func (_m *Context) Next() {
	_m.Called()
}

// Context_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type Context_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *Context_Expecter) Next() *Context_Next_Call {
	return &Context_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *Context_Next_Call) Run(run func()) *Context_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Next_Call) Return() *Context_Next_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Next_Call) RunAndReturn(run func()) *Context_Next_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with given fields: key
func (_m *Context) Param(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type Context_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) Param(key interface{}) *Context_Param_Call {
	return &Context_Param_Call{Call: _e.mock.On("Param", key)}
}

func (_c *Context_Param_Call) Run(run func(key string)) *Context_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Context_Param_Call) Return(_a0 string) *Context_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Context_Param_Call) RunAndReturn(run func(string) string) *Context_Param_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: key
func (_m *Context) Query(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Context_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Context_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - key string
func (_e *Context_Expecter) Query(key interface{}) *Context_Query_Call {
	return &Context_Query_Call{Call: _e.mock.On("Query", key)}
}

func (_c *Context_Query_Call) Run(run func(key string)) *Context_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Context_Query_Call) Return(value string) *Context_Query_Call {
	_c.Call.Return(value)
	return _c
}

func (_c *Context_Query_Call) RunAndReturn(run func(string) string) *Context_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *Context) Set(key string, value interface{}) {
	_m.Called(key, value)
}

// Context_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Context_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *Context_Expecter) Set(key interface{}, value interface{}) *Context_Set_Call {
	return &Context_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *Context_Set_Call) Run(run func(key string, value interface{})) *Context_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *Context_Set_Call) Return() *Context_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Set_Call) RunAndReturn(run func(string, interface{})) *Context_Set_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: code
func (_m *Context) Status(code int) {
	_m.Called(code)
}

// Context_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Context_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - code int
func (_e *Context_Expecter) Status(code interface{}) *Context_Status_Call {
	return &Context_Status_Call{Call: _e.mock.On("Status", code)}
}

func (_c *Context_Status_Call) Run(run func(code int)) *Context_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Context_Status_Call) Return() *Context_Status_Call {
	_c.Call.Return()
	return _c
}

func (_c *Context_Status_Call) RunAndReturn(run func(int)) *Context_Status_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewContext interface {
	mock.TestingT
	Cleanup(func())
}

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContext(t mockConstructorTestingTNewContext) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Environment is an autogenerated mock type for the Environment type
type Environment struct {
	mock.Mock
}

type Environment_Expecter struct {
	mock *mock.Mock
}

func (_m *Environment) EXPECT() *Environment_Expecter {
	return &Environment_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: key
func (_m *Environment) Get(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Environment_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Environment_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *Environment_Expecter) Get(key interface{}) *Environment_Get_Call {
	return &Environment_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *Environment_Get_Call) Run(run func(key string)) *Environment_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Environment_Get_Call) Return(_a0 string) *Environment_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_Get_Call) RunAndReturn(run func(string) string) *Environment_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetUint provides a mock function with given fields: key, defaultValue
func (_m *Environment) GetUint(key string, defaultValue uint) uint {
	ret := _m.Called(key, defaultValue)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, uint) uint); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Environment_GetUint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUint'
type Environment_GetUint_Call struct {
	*mock.Call
}

// GetUint is a helper method to define mock.On call
//   - key string
//   - defaultValue uint
func (_e *Environment_Expecter) GetUint(key interface{}, defaultValue interface{}) *Environment_GetUint_Call {
	return &Environment_GetUint_Call{Call: _e.mock.On("GetUint", key, defaultValue)}
}

func (_c *Environment_GetUint_Call) Run(run func(key string, defaultValue uint)) *Environment_GetUint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint))
	})
	return _c
}

func (_c *Environment_GetUint_Call) Return(_a0 uint) *Environment_GetUint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Environment_GetUint_Call) RunAndReturn(run func(string, uint) uint) *Environment_GetUint_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEnvironment interface {
	mock.TestingT
	Cleanup(func())
}

// NewEnvironment creates a new instance of Environment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEnvironment(t mockConstructorTestingTNewEnvironment) *Environment {
	mock := &Environment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

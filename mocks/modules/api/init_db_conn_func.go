// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// initDbConnFunc is an autogenerated mock type for the initDbConnFunc type
type initDbConnFunc struct {
	mock.Mock
}

type initDbConnFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *initDbConnFunc) EXPECT() *initDbConnFunc_Expecter {
	return &initDbConnFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *initDbConnFunc) Execute(_a0 string) (*gorm.DB, error) {
	ret := _m.Called(_a0)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(string) *gorm.DB); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// initDbConnFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type initDbConnFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 string
func (_e *initDbConnFunc_Expecter) Execute(_a0 interface{}) *initDbConnFunc_Execute_Call {
	return &initDbConnFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *initDbConnFunc_Execute_Call) Run(run func(_a0 string)) *initDbConnFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *initDbConnFunc_Execute_Call) Return(_a0 *gorm.DB, _a1 error) *initDbConnFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTnewInitDbConnFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newInitDbConnFunc creates a new instance of initDbConnFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newInitDbConnFunc(t mockConstructorTestingTnewInitDbConnFunc) *initDbConnFunc {
	mock := &initDbConnFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

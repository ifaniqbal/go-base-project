// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	utils "github.com/ifaniqbal/go-base-project/internal/utils"
	mock "github.com/stretchr/testify/mock"
)

// HttpServer is an autogenerated mock type for the HttpServer type
type HttpServer struct {
	mock.Mock
}

type HttpServer_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpServer) EXPECT() *HttpServer_Expecter {
	return &HttpServer_Expecter{mock: &_m.Mock}
}

// Group provides a mock function with given fields: relativePath, handles
func (_m *HttpServer) Group(relativePath string, handles ...utils.HandlerFunc) utils.RouteHandler {
	_va := make([]interface{}, len(handles))
	for _i := range handles {
		_va[_i] = handles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, relativePath)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 utils.RouteHandler
	if rf, ok := ret.Get(0).(func(string, ...utils.HandlerFunc) utils.RouteHandler); ok {
		r0 = rf(relativePath, handles...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.RouteHandler)
		}
	}

	return r0
}

// HttpServer_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type HttpServer_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - relativePath string
//   - handles ...utils.HandlerFunc
func (_e *HttpServer_Expecter) Group(relativePath interface{}, handles ...interface{}) *HttpServer_Group_Call {
	return &HttpServer_Group_Call{Call: _e.mock.On("Group",
		append([]interface{}{relativePath}, handles...)...)}
}

func (_c *HttpServer_Group_Call) Run(run func(relativePath string, handles ...utils.HandlerFunc)) *HttpServer_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]utils.HandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(utils.HandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *HttpServer_Group_Call) Return(_a0 utils.RouteHandler) *HttpServer_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpServer_Group_Call) RunAndReturn(run func(string, ...utils.HandlerFunc) utils.RouteHandler) *HttpServer_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: addr
func (_m *HttpServer) Run(addr ...string) error {
	_va := make([]interface{}, len(addr))
	for _i := range addr {
		_va[_i] = addr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(addr...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HttpServer_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type HttpServer_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - addr ...string
func (_e *HttpServer_Expecter) Run(addr ...interface{}) *HttpServer_Run_Call {
	return &HttpServer_Run_Call{Call: _e.mock.On("Run",
		append([]interface{}{}, addr...)...)}
}

func (_c *HttpServer_Run_Call) Run(run func(addr ...string)) *HttpServer_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *HttpServer_Run_Call) Return(_a0 error) *HttpServer_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpServer_Run_Call) RunAndReturn(run func(...string) error) *HttpServer_Run_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHttpServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewHttpServer creates a new instance of HttpServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHttpServer(t mockConstructorTestingTNewHttpServer) *HttpServer {
	mock := &HttpServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	excelize "github.com/xuri/excelize/v2"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ExcelWriter is an autogenerated mock type for the ExcelWriter type
type ExcelWriter struct {
	mock.Mock
}

type ExcelWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *ExcelWriter) EXPECT() *ExcelWriter_Expecter {
	return &ExcelWriter_Expecter{mock: &_m.Mock}
}

// SetCellValue provides a mock function with given fields: sheet, cell, value
func (_m *ExcelWriter) SetCellValue(sheet string, cell string, value interface{}) error {
	ret := _m.Called(sheet, cell, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = rf(sheet, cell, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExcelWriter_SetCellValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCellValue'
type ExcelWriter_SetCellValue_Call struct {
	*mock.Call
}

// SetCellValue is a helper method to define mock.On call
//   - sheet string
//   - cell string
//   - value interface{}
func (_e *ExcelWriter_Expecter) SetCellValue(sheet interface{}, cell interface{}, value interface{}) *ExcelWriter_SetCellValue_Call {
	return &ExcelWriter_SetCellValue_Call{Call: _e.mock.On("SetCellValue", sheet, cell, value)}
}

func (_c *ExcelWriter_SetCellValue_Call) Run(run func(sheet string, cell string, value interface{})) *ExcelWriter_SetCellValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *ExcelWriter_SetCellValue_Call) Return(_a0 error) *ExcelWriter_SetCellValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExcelWriter_SetCellValue_Call) RunAndReturn(run func(string, string, interface{}) error) *ExcelWriter_SetCellValue_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: w, opts
func (_m *ExcelWriter) Write(w io.Writer, opts ...excelize.Options) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, w)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer, ...excelize.Options) error); ok {
		r0 = rf(w, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExcelWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ExcelWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - w io.Writer
//   - opts ...excelize.Options
func (_e *ExcelWriter_Expecter) Write(w interface{}, opts ...interface{}) *ExcelWriter_Write_Call {
	return &ExcelWriter_Write_Call{Call: _e.mock.On("Write",
		append([]interface{}{w}, opts...)...)}
}

func (_c *ExcelWriter_Write_Call) Run(run func(w io.Writer, opts ...excelize.Options)) *ExcelWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]excelize.Options, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(excelize.Options)
			}
		}
		run(args[0].(io.Writer), variadicArgs...)
	})
	return _c
}

func (_c *ExcelWriter_Write_Call) Return(_a0 error) *ExcelWriter_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExcelWriter_Write_Call) RunAndReturn(run func(io.Writer, ...excelize.Options) error) *ExcelWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExcelWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewExcelWriter creates a new instance of ExcelWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExcelWriter(t mockConstructorTestingTNewExcelWriter) *ExcelWriter {
	mock := &ExcelWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FeatureFlag is an autogenerated mock type for the FeatureFlag type
type FeatureFlag struct {
	mock.Mock
}

type FeatureFlag_Expecter struct {
	mock *mock.Mock
}

func (_m *FeatureFlag) EXPECT() *FeatureFlag_Expecter {
	return &FeatureFlag_Expecter{mock: &_m.Mock}
}

// CanBeSkipped provides a mock function with given fields: environment
func (_m *FeatureFlag) CanBeSkipped(environment string) bool {
	ret := _m.Called(environment)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(environment)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureFlag_CanBeSkipped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanBeSkipped'
type FeatureFlag_CanBeSkipped_Call struct {
	*mock.Call
}

// CanBeSkipped is a helper method to define mock.On call
//  - environment string
func (_e *FeatureFlag_Expecter) CanBeSkipped(environment interface{}) *FeatureFlag_CanBeSkipped_Call {
	return &FeatureFlag_CanBeSkipped_Call{Call: _e.mock.On("CanBeSkipped", environment)}
}

func (_c *FeatureFlag_CanBeSkipped_Call) Run(run func(environment string)) *FeatureFlag_CanBeSkipped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeatureFlag_CanBeSkipped_Call) Return(_a0 bool) *FeatureFlag_CanBeSkipped_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsActive provides a mock function with given fields: flag
func (_m *FeatureFlag) IsActive(flag string) bool {
	ret := _m.Called(flag)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureFlag_IsActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsActive'
type FeatureFlag_IsActive_Call struct {
	*mock.Call
}

// IsActive is a helper method to define mock.On call
//  - flag string
func (_e *FeatureFlag_Expecter) IsActive(flag interface{}) *FeatureFlag_IsActive_Call {
	return &FeatureFlag_IsActive_Call{Call: _e.mock.On("IsActive", flag)}
}

func (_c *FeatureFlag_IsActive_Call) Run(run func(flag string)) *FeatureFlag_IsActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeatureFlag_IsActive_Call) Return(_a0 bool) *FeatureFlag_IsActive_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsExplicitlyActive provides a mock function with given fields: flag
func (_m *FeatureFlag) IsExplicitlyActive(flag string) bool {
	ret := _m.Called(flag)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FeatureFlag_IsExplicitlyActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExplicitlyActive'
type FeatureFlag_IsExplicitlyActive_Call struct {
	*mock.Call
}

// IsExplicitlyActive is a helper method to define mock.On call
//  - flag string
func (_e *FeatureFlag_Expecter) IsExplicitlyActive(flag interface{}) *FeatureFlag_IsExplicitlyActive_Call {
	return &FeatureFlag_IsExplicitlyActive_Call{Call: _e.mock.On("IsExplicitlyActive", flag)}
}

func (_c *FeatureFlag_IsExplicitlyActive_Call) Run(run func(flag string)) *FeatureFlag_IsExplicitlyActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FeatureFlag_IsExplicitlyActive_Call) Return(_a0 bool) *FeatureFlag_IsExplicitlyActive_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFeatureFlag interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeatureFlag creates a new instance of FeatureFlag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeatureFlag(t mockConstructorTestingTNewFeatureFlag) *FeatureFlag {
	mock := &FeatureFlag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
